{
  // http://eslint.org/docs/rules/

  "env": {
    "amd": false,           // defines require() and define() as global variables as per the amd spec
    "applescript": false,   // AppleScript global variables
    "browser": true,        // browser global variables
    "commonjs": false,      // CommonJS global variables and CommonJS scoping
                            // (use this for browser-only code that uses Browserify/WebPack).
    "embertest": false,     // Ember test helper globals
    "es6": true,            // enable all ECMAScript 6 features except for modules
    "jasmine": false,       // adds all of the Jasmine testing global variables for version 1.3 and 2.0
    "jest": false,          // Jest global variables
    "jquery": true,         // jquery global variables
    "meteor": false,        // Meteor global variables
    "mocha": false,         // adds all of the Mocha testing global variables
    "mongo": false,         // MongoDB global variables
    "nashorn": false,       // Java 8 Nashorn global variables.
    "node": false,          // Node.js global variables and Node.js-specific rules
    "phantomjs": false,     // phantomjs global variables
    "prototypejs": false,   // Prototype.js global variables
    "protractor": false,    // Protractor global variables
    "qunit": false,         // QUnit global variables
    "serviceworker": false, // Service Worker global variables
    "shelljs": false,       // shelljs global variables
    "webextensions": false, // WebExtensions globals
    "worker": false,        // web workers global variables
  },

  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "arrowFunctions": true,                    // enable arrow functions
      "binaryLiterals": false,                   // enable binary literals
      "blockBindings": false,                    // enable let and const (aka block bindings)
      "classes": true,                           // enable classes
      "defaultParams": false,                    // enable default function parameters
      "destructuring": false,                    // enable destructuring
      "forOf": false,                            // enable for-of loops
      "generators": false,                       // enable generators
      "modules": false,                          // enable modules and global strict mode
      "objectLiteralComputedProperties": false,  // enable computed object literal property names
      "objectLiteralDuplicateProperties": false, // enable duplicate object literal properties in strict mode
      "objectLiteralShorthandMethods": false,    // enable object literal shorthand methods
      "objectLiteralShorthandProperties": false, // enable object literal shorthand properties
      "octalLiterals": false,                    // enable octal literals
      "regexUFlag": false,                       // enable the regular expression u flag
      "regexYFlag": false,                       // enable the regular expression y flag
      "restParams": false,                       // enable the rest parameters
      "spread": false,                           // enable the spread operator
      "superInFunctions": false,                 // enable super references inside of functions
      "templateStrings": false,                  // enable template strings
      "unicodeCodePointEscapes": false,          // enable code point escapes
      "globalReturn": false,                     // allow return statements in the global scope
      "jsx": false                               // enable JSX
    }
  },

  "globals": {
    // additional predefined global variables
  },

  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////

    "no-cond-assign": "error",                       // disallow assignment operators in conditional expressions
    "no-console": "error",                           // disallow the use of console
    "no-constant-condition": "error",                // disallow constant expressions in conditions
    "no-control-regex": "off",                       // disallow control characters in regular expressions
    "no-debugger": "warn",                           // disallow the use of debugger
    "no-dupe-args": "error",                         // disallow duplicate arguments in function definitions
    "no-dupe-keys": "error",                         // disallow duplicate keys in object literals
    "no-duplicate-case": "error",                    // disallow duplicate case labels
    "no-empty-character-class": "error",             // disallow empty character classes in regular expressions
    "no-empty": "error",                             // disallow empty block statements
    "no-ex-assign": "error",                         // disallow reassigning exceptions in catch clauses
    "no-extra-boolean-cast": "error",                // disallow unnecessary boolean casts
    "no-extra-parens": "off",                        // disallow unnecessary parentheses
    "no-extra-semi": "error",                        // disallow unnecessary semicolons
    "no-func-assign": "error",                       // disallow reassigning function declarations
    "no-inner-declarations": ["error", "functions"], // disallow variable or function declarations in nested blocks
    "no-invalid-regexp": "error",                    // disallow invalid regular expression strings in RegExp constructors
    "no-irregular-whitespace": "error",              // disallow irregular whitespace outside of strings and comments
    "no-obj-calls": "error",                         // disallow calling global object properties as functions
    "no-prototype-builtins": "error",                // disallow calling some Object.prototype methods directly on objects
    "no-regex-spaces": "error",                      // disallow multiple spaces in regular expressions
    "no-sparse-arrays": "error",                     // disallow sparse arrays
    "no-template-curly-in-string": "error",          // disallow template literal placeholder syntax in regular strings
    "no-unexpected-multiline": "off",                // disallow confusing multiline expressions
    "no-unreachable": "error",                       // disallow unreachable code after return, throw, continue, and break statements
    "no-unsafe-finally": "error",                    // disallow control flow statements in finally blocks
    "no-unsafe-negation": "error",                   // disallow negating the left operand of relational operators
    "use-isnan": "error",                            // require calls to isNaN() when checking for NaN
    "valid-jsdoc": "off",                            // enforce valid JSDoc comments
    "valid-typeof": "error",                         // enforce comparing typeof expressions against valid strings


    ////////// Best Practices //////////

    "accessor-pairs": "off",                                       // enforce getter and setter pairs in objects
    "array-callback-return": "error",                              // enforce return statements in callbacks of array methods
    "block-scoped-var": "off",                                     // enforce the use of variables within the scope they are defined
    "class-methods-use-this": "error",                             // enforce that class methods utilize this
    "complexity": ["off", 11],                                     // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": "off",                                    // require return statements to either always or never specify values
    "curly": ["error", "all"],                                     // enforce consistent brace style for all control statements
    "default-case": "off",                                         // require default cases in switch statements
    "dot-location": "off",                                         // enforce consistent newlines before and after dots
    "dot-notation": ["warn", { "allowKeywords": true }],           // enforce dot notation whenever possible
    "eqeqeq": "error",                                             // require the use of === and !==
    "guard-for-in": "error",                                       // require for-in loops to include an if statement
    "no-alert": "off",                                             // disallow the use of alert, confirm, and prompt
    "no-caller": "error",                                          // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": "off",                                 // disallow lexical declarations in case clauses
    "no-div-regex": "off",                                         // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": "off",                                       // disallow else blocks after return statements in if statements
    "no-empty-function": "warn",                                   // disallow empty functions
    "no-empty-pattern": "error",                                   // disallow empty destructuring patterns
    "no-eq-null": "error",                                         // disallow null comparisons without type-checking operators
    "no-eval": "error",                                            // disallow the use of eval()
    "no-extend-native": "off",                                     // disallow extending native types
    "no-extra-bind": "off",                                        // disallow unnecessary calls to .bind()
    "no-extra-label": "error",                                     // disallow unnecessary labels
    "no-fallthrough": "error",                                     // disallow fallthrough of case statements
    "no-floating-decimal": "off",                                  // disallow leading or trailing decimal points in numeric literals
    "no-global-assign": "error",                                   // disallow assignments to native objects or read-only global variables
    "no-implicit-coercion": "error",                               // disallow shorthand type conversions
    "no-implicit-globals": "off",                                  // disallow variable and function declarations in the global scope
    "no-implied-eval": "off",                                      // disallow the use of eval()-like methods
    "no-invalid-this": "off",                                      // disallow this keywords outside of classes or class-like objects
    "no-iterator": "error",                                        // disallow the use of the __iterator__ property
    "no-labels": "off",                                            // disallow labeled statements
    "no-lone-blocks": "off",                                       // disallow unnecessary nested blocks
    "no-loop-func": "error",                                       // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": ["error", { "ignoreArrayIndexes": true, "ignore": [-1, 0, 1] }], // disallow magic numbers
    "no-multi-spaces": "warn",                                     // disallow multiple spaces
    "no-multi-str": "off",                                         // disallow multiline strings
    "no-new-func": "warn",                                         // disallow new operators with the Function object
    "no-new-wrappers": "off",                                      // disallow new operators with the String, Number, and Boolean objects
    "no-new": "error",                                             // disallow new operators outside of assignments or comparisons
    "no-octal-escape": "off",                                      // disallow octal escape sequences in string literals
    "no-octal": "error",                                           // disallow octal literals
    "no-param-reassign": "off",                                    // disallow reassigning function parameters
    "no-proto": "error",                                           // disallow the use of the __proto__ property
    "no-redeclare": "error",                                       // disallow variable redeclaration
    "no-restricted-properties": "off",                             // disallow certain properties on certain objects
    "no-return-assign": "off",                                     // disallow assignment operators in return statements
    "no-script-url": "error",                                      // disallow javascript: urls
    "no-self-assign": "error",                                     // disallow assignments where both sides are exactly the same
    "no-self-compare": "off",                                      // disallow comparisons where both sides are exactly the same
    "no-sequences": "off",                                         // disallow comma operators
    "no-throw-literal": "off",                                     // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": "off",                         // disallow unmodified loop conditions
    "no-unused-expressions": "off",                                // disallow unused expressions
    "no-unused-labels": "error",                                   // disallow unused labels
    "no-useless-call": "off",                                      // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "error",                                  // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": "warn",                                   // disallow unnecessary escape characters
    "no-useless-return": "error",                                  // disallow redundant return statements
    "no-void": "off",                                              // disallow void operators
    "no-warning-comments": ["off", { "terms": ["todo", "fixme", "xxx"], "location": "start" }],  // disallow specified warning terms in comments
    "no-with": "off",                                              // disallow with statements
    "radix": "off",                                                // enforce the consistent use of the radix argument when using parseInt()
    "vars-on-top": "off",                                          // require var declarations be placed at the top of their containing scope
    "wrap-iife": "off",                                            // require parentheses around immediate function invocations
    "yoda": ["error", "never", { "exceptRange": true }],           // require or disallow “Yoda” conditions


    ////////// Strict Mode //////////

    "strict": ["error", "function"],     // require or disallow strict mode directives


    ////////// Variables //////////

    "init-declarations": "off",          // require or disallow initialization in variable declarations
    "no-catch-shadow": "off",            // disallow catch clause parameters from shadowing variables in the outer scope
    "no-delete-var": "off",              // disallow deleting variables
    "no-label-var": "off",               // disallow labels that share a name with a variable
    "no-restricted-globals": "off",      // disallow specified global variables
    "no-shadow": "off",                  // disallow variable declarations from shadowing variables declared in the outer scope
    "no-shadow-restricted-names": "off", // disallow identifiers from shadowing restricted names
    "no-undef": "error",                 // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undef-init": "off",              // disallow initializing variables to undefined
    "no-undefined": "off",               // disallow the use of undefined as an identifier
    "no-unused-vars": "error",           // disallow unused variables
    "no-use-before-define": "off",       // disallow the use of variables before they are defined


    ////////// Node.js and CommonJS //////////

    "callback-return": "off",            // require return statements after callbacks
    "global-require": "off",             // require require() calls to be placed at top-level module scope
    "handle-callback-err": "off",        // require error handling in callbacks
    "no-mixed-requires": ["off", false], // disallow require calls to be mixed with regular variable declarations
    "no-new-require": "off",             // disallow new operators with calls to require
    "no-path-concat": "off",             // disallow string concatenation with __dirname and __filename
    "no-process-env": "off",             // disallow the use of process.env
    "no-process-exit": "off",            // disallow the use of process.exit()
    "no-restricted-modules": "off",      // disallow specified modules when loaded by require
    "no-sync": "off",                    // disallow synchronous methods


    ////////// Stylistic Issues //////////

    "array-bracket-spacing": ["warn", "never"],                                          // enforce consistent spacing inside array brackets
    "block-spacing": "error",                                                            // enforce consistent spacing inside single-line blocks
    "brace-style": ["error", "1tbs"],                                                    // enforce consistent brace style for blocks
    "camelcase": "warn",                                                                 // enforce camelcase naming convention
    "comma-dangle": ["error", "never"],                                                  // require or disallow trailing commas
    "comma-spacing": ["warn", { "before": false, "after": true }],                       // enforce consistent spacing before and after commas
    "comma-style": ["error", "last"],                                                    // enforce consistent comma style
    "computed-property-spacing": ["warn", "never"],                                      // enforce consistent spacing inside computed property brackets
    "consistent-this": ["warn", "context"],                                              // enforce consistent naming when capturing the current execution context
    "eol-last": "warn",                                                                  // require or disallow newline at the end of files
    "func-call-spacing": ["error", "never"],                                             // require or disallow spacing between function identifiers and their invocations
    "func-name-matching": "off",                                                         // require function names to match the name of the variable or property to which they are assigned
    "func-names": "off",                                                                 // require or disallow named function expressions
    "func-style": ["error", "declaration", { "allowArrowFunctions": true }],             // enforce the consistent use of either function declarations or expressions
    "id-blacklist": "warn",                                                              // disallow specified identifiers
    "id-length": "warn",                                                                 // enforce minimum and maximum identifier lengths
    "id-match": "off",                                                                   // require identifiers to match a specified regular expression
    "indent": ["error", 4, { "VariableDeclarator": { "var": 1, "let": 1, "const": 2 }, "SwitchCase": 1 }], // enforce consistent indentation
    "jsx-quotes": ["error", "prefer-single"],                                            // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": ["warn", { "beforeColon": false, "afterColon": true }],               // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": "error",                                                          // enforce consistent spacing before and after keywords
    "line-comment-position": "off",                                                      // enforce position of line comments
    "linebreak-style": ["error", "unix"],                                                // enforce consistent linebreak style
    "lines-around-comment": "warn",                                                      // require empty lines around comments
    "lines-around-directive": ["warn", { "before": "never", "after": "always" }],        // require or disallow newlines around directives
    "max-depth": ["warn", 4],                                                            // enforce a maximum depth that blocks can be nested
    "max-len": ["off", 80, 4],                                                           // enforce a maximum line length
    "max-lines": "off",                                                                  // enforce a maximum number of lines per file
    "max-nested-callbacks": ["warn", 5],                                                 // enforce a maximum depth that callbacks can be nested
    "max-params": ["warn", 5],                                                           // enforce a maximum number of parameters in function definitions
    "max-statements": ["off", 10],                                                       // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": ["error", { "max": 3 }],                                  // enforce a maximum number of statements allowed per line
    "multiline-ternary": "off",                                                          // enforce newlines between operands of ternary expressions
    "new-cap": ["error", { "capIsNew": false }],                                         // require constructor names to begin with a capital letter
    "new-parens": "error",                                                               // require parentheses when invoking a constructor with no arguments
    "newline-after-var": "off",                                                          // require or disallow an empty line after variable declarations
    "newline-before-return": "off",                                                      // require an empty line before return statements
    "newline-per-chained-call": "off",                                                   // require a newline after each call in a method chain
    "no-array-constructor": "warn",                                                      // disallow Array constructors
    "no-bitwise": "error",                                                               // disallow bitwise operators
    "no-continue": "warn",                                                               // disallow continue statements
    "no-inline-comments": "warn",                                                        // disallow inline comments after code
    "no-lonely-if": "error",                                                             // disallow if statements as the only statement in else blocks
    "no-mixed-operators": "warn",                                                        // disallow mixed binary operators
    "no-mixed-spaces-and-tabs": ["error", false],                                        // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["warn", {"max": 3, "maxEOF": 1}],                        // disallow multiple empty lines
    "no-negated-condition": "off",                                                       // disallow negated conditions
    "no-nested-ternary": "error",                                                        // disallow nested ternary expressions
    "no-new-object": "warn",                                                             // disallow Object constructors
    "no-plusplus": ["error", { allowForLoopAfterthoughts: true }],                       // disallow the unary operators ++ and --
    "no-restricted-syntax": "off",                                                       // disallow specified syntax
    "no-tabs": "error",                                                                  // disallow tabs in file
    "no-ternary": "off",                                                                 // disallow ternary operators
    "no-trailing-spaces": "error",                                                       // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": "off",                                                       // disallow dangling underscores in identifiers
    "no-unneeded-ternary": "error",                                                      // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": "off",                                              // disallow whitespace before properties
    "object-curly-newline": ["warn", {"ObjectExpression": {"minProperties": 1}, "ObjectPattern": {"minProperties": 1}}],                             // enforce consistent line breaks inside braces
    "object-curly-spacing": "warn",                                                      // enforce consistent spacing inside braces
    "object-property-newline": "warn",                                                   // enforce placing object properties on separate lines
    "one-var-declaration-per-line": ["warn", "always"],                                  // require or disallow newlines around variable declarations
    "one-var": ["off", "always"],                                                        // enforce variables to be declared either together or separately in functions
    "operator-assignment": ["off", "always"],                                            // require or disallow assignment operator shorthand where possible
    "operator-linebreak": ["error", "before"],                                           // enforce consistent linebreak style for operators
    "padded-blocks": ["warn", "never"],                                                  // require or disallow padding within blocks
    "quote-props": ["warn", "consistent"],                                               // require quotes around object literal property names
    "quotes": ["error", "single", {"avoidEscape": true, "allowTemplateLiterals": true}], // enforce the consistent use of either backticks, double, or single quotes
    "require-jsdoc": "error",                                                            // require JSDoc comments
    "semi": ["error", "always", { "omitLastInOneLineBlock": true}],                      // require or disallow semicolons instead of ASI
    "semi-spacing": ["error", {"before": false, "after": true}],                         // enforce consistent spacing before and after semicolons
    "sort-keys": "off",                                                                  // require object keys to be sorted
    "sort-vars": "off",                                                                  // require variables within the same declaration block to be sorted
    "space-before-blocks": ["error", "always"],                                          // enforce consistent spacing before blocks
    "space-before-function-paren": ["error", "never"],                                   // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": ["warn", "never"],                                                // enforce consistent spacing inside parentheses
    "space-infix-ops": "error",                                                          // require spacing around infix operators
    "space-unary-ops": ["error", { "words": true, "nonwords": false }],                  // enforce consistent spacing before or after unary operators
    "spaced-comment": ["warn", "always", { "line": { "exceptions": ["="] } }],           // enforce consistent spacing after the // or /* in a comment
    "unicode-bom": "off",                                                                // require or disallow Unicode byte order mark (BOM)
    "wrap-regex": "off",                                                                 // require parenthesis around regex literals


    ////////// ECMAScript 6 //////////

    "arrow-body-style": ["warn", "as-needed"],       // require braces around arrow function bodies
    "arrow-parens": ["warn", "as-needed"],           // require parentheses around arrow function arguments
    "arrow-spacing": "error",                        // enforce consistent spacing before and after the arrow in arrow functions
    "constructor-super": "off",                      // require super() calls in constructors
    "generator-star-spacing": ["error", {"before": true, "after": true}], // enforce consistent spacing around * operators in generator functions
    "no-class-assign": "off",                        // disallow reassigning class members
    "no-confusing-arrow": "off",                     // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": "off",                        // disallow reassigning const variables
    "no-dupe-class-members": "off",                  // disallow duplicate class members
    "no-duplicate-imports": "off",                   // disallow duplicate module imports
    "no-new-symbol": "off",                          // disallow new operators with the Symbol object
    "no-restricted-imports": "off",                  // disallow specified modules when loaded by import
    "no-this-before-super": "off",                   // disallow this/super before calling super() in constructors
    "no-useless-computed-key": "off",                // disallow unnecessary computed property keys in object literals
    "no-useless-constructor": "off",                 // disallow unnecessary constructors
    "no-useless-rename": "off",                      // disallow renaming import, export, and destructured assignments to the same name
    "no-var": "off",                                 // require let or const instead of var
    "object-shorthand": "off",                       // require or disallow method and property shorthand syntax for object literals
    "prefer-arrow-callback": "off",                  // require arrow functions as callbacks
    "prefer-const": "off",                           // require const declarations for variables that are never reassigned after declared
    "prefer-numeric-literals": "off",                // disallow parseInt() in favor of binary, octal, and hexadecimal literals
    "prefer-rest-params": "off",                     // require rest parameters instead of arguments
    "prefer-spread": "off",                          // require spread operators instead of .apply()
    "prefer-template": "off",                        // require template literals instead of string concatenation
    "require-yield": "off",                          // require generator functions to contain yield
    "rest-spread-spacing": "off",                    // enforce spacing between rest and spread operators and their expressions
    "sort-imports": "off",                           // enforce sorted import declarations within modules
    "symbol-description": "off",                     // require symbol descriptions
    "template-curly-spacing": "off",                 // require or disallow spacing around embedded expressions of template strings
    "yield-star-spacing": "off"                      // require or disallow spacing around the * in yield* expressions
  }
}
